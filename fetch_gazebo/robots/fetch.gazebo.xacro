<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="fetch" >
  <xacro:include filename="$(find fetch_description)/robots/fetch.urdf" />


  
        <!-- Create laser reference frame -->
        <link name="camera_link">
            <inertial>
                <mass value="0.1" />
                <origin xyz="0 0 0" />
                <inertia ixx="0.01" ixy="0.0" ixz="0.0"
                         iyy="0.01" iyz="0.0"
                         izz="0.01" />
            </inertial>

            <visual>
                <origin xyz=" 0 0 0 " rpy="0 0 0" />
                <geometry>
                    <box size="0.01 0.04 0.04" />
                </geometry>
                <material name="black"/>
            </visual>

            <collision>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
                <geometry>
                    <box size="0.01 0.04 0.04" />
                </geometry>
            </collision>
        </link>
        

    <xacro:property name="camera_offset_x" value="-0.05" />
    <xacro:property name="camera_offset_y" value="0" />
    <xacro:property name="camera_offset_z" value="0.06" />

    <!-- Camera -->
    <joint name="camera_joint" type="fixed">
        <origin xyz="${camera_offset_x} ${camera_offset_y} ${camera_offset_z}" rpy="0 0 0" />
        <parent link="gripper_link"/>
        <child link="camera_link"/>
    </joint>

        <gazebo reference="camera_link">
            <material>Gazebo/Black</material>
        </gazebo>

        <gazebo reference="camera_link">
            <sensor type="camera" name="camera_node">
                <update_rate>30.0</update_rate>
                <camera name="head">
                    <horizontal_fov>1.3962634</horizontal_fov>
                    <image>
                        <width>1280</width>
                        <height>720</height>
                        <format>R8G8B8</format>
                    </image>
                    <clip>
                        <near>0.02</near>
                        <far>300</far>
                    </clip>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.007</stddev>
                    </noise>
                </camera>
                <plugin name="gazebo_camera" filename="libgazebo_ros_camera.so">
                    <alwaysOn>true</alwaysOn>
                    <updateRate>0.0</updateRate>
                    <cameraName>/camera</cameraName>
                    <imageTopicName>image_raw</imageTopicName>
                    <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                    <frameName>camera_link</frameName>
                    <hackBaseline>0.07</hackBaseline>
                    <distortionK1>0.0</distortionK1>
                    <distortionK2>0.0</distortionK2>
                    <distortionK3>0.0</distortionK3>
                    <distortionT1>0.0</distortionT1>
                    <distortionT2>0.0</distortionT2>
                </plugin>
            </sensor>
        </gazebo>









  <!-- Base is modeled as a big tub sitting on floor, with two wheels -->
  <gazebo reference="base_link">
    <kp>100000000.0</kp>
    <kd>10.0</kd>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>10.0</maxVel>
    <minDepth>0.0005</minDepth>
  </gazebo>
  <gazebo reference="r_wheel_link">
    <kp>500000.0</kp>
    <kd>10.0</kd>
    <mu1>10</mu1>
    <mu2>10</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.003</minDepth>
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="l_wheel_link">
    <kp>500000.0</kp>
    <kd>10.0</kd>
    <mu1>10</mu1>
    <mu2>10</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.003</minDepth>
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="l_wheel_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="r_wheel_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="forearm_roll_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>
  <gazebo reference="wrist_roll_joint">
    <implicitSpringDamper>1</implicitSpringDamper>
  </gazebo>

  <!-- Gripper is another fallacy of physics -->
  <gazebo reference="r_gripper_finger_link">
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <mu1>30.0</mu1>
    <mu2>30.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.001</minDepth>
    <material>Gazebo/Grey</material>
  </gazebo>
  <gazebo reference="l_gripper_finger_link">
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <mu1>30.0</mu1>
    <mu2>30.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.001</minDepth>
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- SICK TIM561 (25m Range) -->
  <gazebo reference="laser_link">
    <sensor type="ray" name="base_laser">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>15</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>662</samples>
            <resolution>1</resolution>
            <min_angle>-1.91986</min_angle>
            <max_angle>1.91986</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.05</min>
          <max>25.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <!-- Noise parameters based on spec for SICK TIM561 (10m version) -->
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.02</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_base_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/base_scan</topicName>
        <frameName>laser_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Primesense Carmine 1.09 -->
  <gazebo reference="head_camera_rgb_frame">
    <sensor type="depth" name="camera">
      <always_on>true</always_on>
      <update_rate>15.0</update_rate>
      <camera>
        <horizontal_fov>1.047197</horizontal_fov>
        <image>
          <!-- openni_kinect plugin works only with BGR8 -->
          <format>B8G8R8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>50</far>
        </clip>
      </camera>
      <plugin name="head_camera_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.1</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>15.0</updateRate>
        <cameraName>head_camera</cameraName>
        <imageTopicName>/head_camera/rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>/head_camera/rgb/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/head_camera/depth_registered/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/head_camera/depth_registered/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/head_camera/depth_registered/points</pointCloudTopicName>
        <frameName>head_camera_rgb_optical_frame</frameName>
        <pointCloudCutoff>0.35</pointCloudCutoff>
        <pointCloudCutoffMax>4.5</pointCloudCutoffMax>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Color the bellows -->
  <gazebo reference="bellows_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="bellows_link2">
    <material>Gazebo/Black</material>
  </gazebo>

  <!-- Color the estop -->
  <gazebo reference="estop_link">
    <material>Gazebo/Red</material>
  </gazebo>

  <!-- Load the plugin -->
  <gazebo>
    <plugin name="fetch_gazebo_plugin" filename="libfetch_gazebo_plugin.so"/>
  </gazebo>

</robot>
